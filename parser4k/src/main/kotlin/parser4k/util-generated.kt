@file:Suppress("UNCHECKED_CAST", "unused")

package parser4k

import dev.forkhandles.tuples.*

/////////////////////////////////////////////////////
// This file was generated by generate-source-code.kt
/////////////////////////////////////////////////////

fun <T2> InOrder2<*, T2>.skipFirst(): Parser<T2> = map { (_, it2) -> it2 }
fun <T2, T3> InOrder3<*, T2, T3>.skipFirst(): Parser<Tuple2<T2, T3>> = map { (_, it2, it3) -> Tuple2(it2, it3) }
fun <T2, T3, T4> InOrder4<*, T2, T3, T4>.skipFirst(): Parser<Tuple3<T2, T3, T4>> = map { (_, it2, it3, it4) -> Tuple3(it2, it3, it4) }
fun <T2, T3, T4, T5> InOrder5<*, T2, T3, T4, T5>.skipFirst(): Parser<Tuple4<T2, T3, T4, T5>> = map { (_, it2, it3, it4, it5) -> Tuple4(it2, it3, it4, it5) }
fun <T2, T3, T4, T5, T6> InOrder6<*, T2, T3, T4, T5, T6>.skipFirst(): Parser<Tuple5<T2, T3, T4, T5, T6>> = map { (_, it2, it3, it4, it5, it6) -> Tuple5(it2, it3, it4, it5, it6) }
fun <T2, T3, T4, T5, T6, T7> InOrder7<*, T2, T3, T4, T5, T6, T7>.skipFirst(): Parser<Tuple6<T2, T3, T4, T5, T6, T7>> = map { (_, it2, it3, it4, it5, it6, it7) -> Tuple6(it2, it3, it4, it5, it6, it7) }
fun <T2, T3, T4, T5, T6, T7, T8> InOrder8<*, T2, T3, T4, T5, T6, T7, T8>.skipFirst(): Parser<Tuple7<T2, T3, T4, T5, T6, T7, T8>> = map { (_, it2, it3, it4, it5, it6, it7, it8) -> Tuple7(it2, it3, it4, it5, it6, it7, it8) }

fun <T1> InOrder2<T1, *>.skipLast(): Parser<T1> = map { (it1, _) -> it1 }
fun <T1, T2> InOrder3<T1, T2, *>.skipLast(): Parser<Tuple2<T1, T2>> = map { (it1, it2, _) -> Tuple2(it1, it2) }
fun <T1, T2, T3> InOrder4<T1, T2, T3, *>.skipLast(): Parser<Tuple3<T1, T2, T3>> = map { (it1, it2, it3, _) -> Tuple3(it1, it2, it3) }
fun <T1, T2, T3, T4> InOrder5<T1, T2, T3, T4, *>.skipLast(): Parser<Tuple4<T1, T2, T3, T4>> = map { (it1, it2, it3, it4, _) -> Tuple4(it1, it2, it3, it4) }
fun <T1, T2, T3, T4, T5> InOrder6<T1, T2, T3, T4, T5, *>.skipLast(): Parser<Tuple5<T1, T2, T3, T4, T5>> = map { (it1, it2, it3, it4, it5, _) -> Tuple5(it1, it2, it3, it4, it5) }
fun <T1, T2, T3, T4, T5, T6> InOrder7<T1, T2, T3, T4, T5, T6, *>.skipLast(): Parser<Tuple6<T1, T2, T3, T4, T5, T6>> = map { (it1, it2, it3, it4, it5, it6, _) -> Tuple6(it1, it2, it3, it4, it5, it6) }
fun <T1, T2, T3, T4, T5, T6, T7> InOrder8<T1, T2, T3, T4, T5, T6, T7, *>.skipLast(): Parser<Tuple7<T1, T2, T3, T4, T5, T6, T7>> = map { (it1, it2, it3, it4, it5, it6, it7, _) -> Tuple7(it1, it2, it3, it4, it5, it6, it7) }

fun <T2> InOrder3<*, T2, *>.skipWrapper(): Parser<T2> = map { (_, it2, _) -> it2 }
fun <T2, T3> InOrder4<*, T2, T3, *>.skipWrapper(): Parser<Tuple2<T2, T3>> = map { (_, it2, it3, _) -> Tuple2(it2, it3) }
fun <T2, T3, T4> InOrder5<*, T2, T3, T4, *>.skipWrapper(): Parser<Tuple3<T2, T3, T4>> = map { (_, it2, it3, it4, _) -> Tuple3(it2, it3, it4) }
fun <T2, T3, T4, T5> InOrder6<*, T2, T3, T4, T5, *>.skipWrapper(): Parser<Tuple4<T2, T3, T4, T5>> = map { (_, it2, it3, it4, it5, _) -> Tuple4(it2, it3, it4, it5) }
fun <T2, T3, T4, T5, T6> InOrder7<*, T2, T3, T4, T5, T6, *>.skipWrapper(): Parser<Tuple5<T2, T3, T4, T5, T6>> = map { (_, it2, it3, it4, it5, it6, _) -> Tuple5(it2, it3, it4, it5, it6) }
fun <T2, T3, T4, T5, T6, T7> InOrder8<*, T2, T3, T4, T5, T6, T7, *>.skipWrapper(): Parser<Tuple6<T2, T3, T4, T5, T6, T7>> = map { (_, it2, it3, it4, it5, it6, it7, _) -> Tuple6(it2, it3, it4, it5, it6, it7) }

