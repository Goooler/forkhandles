description = 'ForkHandles Tuples library'

dependencies {
    api Libs.kotlin_stdlib_jdk8
    testApi Config.TestDependencies
}

ext.maxTupleSize = 8

ext.packageName = "dev.forkhandles.tuples"
ext.packageSubdir = packageName.replace('.', '/')
ext.generatedSrcDir = new File("$buildDir/generated-src/main/kotlin")
ext.generatedPackageDir = new File("$generatedSrcDir/$packageSubdir")

def generateSourceFile(name, contents) {
    new File("$generatedPackageDir/$name").withPrintWriter("UTF-8") { out ->
        out.println("// GENERATED CODE: DO NOT EDIT")
        out.println()
        out.println("package $packageName")
        out.println()
        contents(out)
    }
}

task recreateGeneratedSrcDir {
    doLast {
        delete generatedPackageDir
        mkdir generatedPackageDir
    }
}

static String params(String prefix, int count) {
    return params(prefix, 1..count)
}

static String params(String prefix, IntRange indices) {
    return indices.collect { "$prefix$it" }.join(", ")
}

static String tupleType(int n) {
    return tupleType(1..n)
}

static String tupleType(IntRange indices) {
    return "Tuple${indices.size()}<${params("T",indices)}>"
}


task generateTupleClasses {
    dependsOn "recreateGeneratedSrcDir"

    doLast {
        generateSourceFile("tuples.kt") { out ->
            for (n in 4..maxTupleSize) {
                out.println("data class ${tupleType(n)}(")
                for (i in 1..n) {
                    out.print("  val val$i : T$i")
                    if (i < n) out.print(",")
                    out.println()
                }
                out.println(")")
                out.println()
            }
        }
    }
}

task generateTupleFactoryFunctions {
    dependsOn "recreateGeneratedSrcDir"

    doLast {
        generateSourceFile("create.kt") { out ->
            for (n in 2..maxTupleSize) {
                out.println("fun <${params("T", n)}> tuple(")
                for (i in 1..n) {
                    out.print("  val$i : T$i")
                    if (i < n) out.print(",")
                    out.println()
                }
                out.println(") = Tuple$n(${params("val", n)})")
                out.println()
            }
        }
    }
}


task generateToListFunctions {
    dependsOn "recreateGeneratedSrcDir"

    doLast {
        generateSourceFile("tolist.kt") { out ->
            for (n in 2..maxTupleSize) {
                out.println("fun <T> Tuple$n<${(["T"] * n).join(", ")}>.toList(): List<T> =")
                out.println("  listOf(${params("val", n)})")
                out.println()
            }
        }
    }
}

task generatePlusFunctions {
    dependsOn "recreateGeneratedSrcDir"

    doLast {
        def operandType = { IntRange i ->
            if (i.size() == 1) {
                return "T${i.first()}"
            } else {
                return tupleType(i)
            }
        }

        generateSourceFile("plus.kt") { out ->
            for (n in 3..maxTupleSize) {
                for (i in 1..n-1) {
                    out.println("operator fun <${params("T",n)}> ${operandType(1..i)}.plus(that: ${operandType(i+1..n)}): ${tupleType(n)} =")
                    out.print("  tuple(")

                    for (x in 1..i) {
                        if (x > 1) {
                            out.print(", ")
                        }
                        out.print("this")
                        if (i > 1) {
                            out.print(".val$x")
                        }
                    }

                    for (x in i+1..n) {
                        out.print(", that")
                        if (i < n-1) {
                            out.print(".val${x-i}")
                        }
                    }

                    out.println(")")
                    out.println()
                }
            }
        }
    }
}

task generateSrcMain {
    dependsOn "generateTupleClasses"
    dependsOn "generateTupleFactoryFunctions"
    dependsOn "generateToListFunctions"
    dependsOn "generatePlusFunctions"
}

compileKotlin {
    dependsOn "generateSrcMain"
}

sourceSets {
    main.kotlin {
        srcDir generatedSrcDir
    }
}

